nameOverride: can-docker-shell-service
fullnameOverride: ""
namespace:
  name: can-docker-shell-service
environment: staging
replicaCount: 1
timeToFinishWork: 3600
iam:
  role: arn:aws:iam::543777179833:role/eks-staging-can-{{ .Values.nameOverride }}-staging
service:
  type: ClusterIP
  health_port: 9231
image:
  repository: 543777179833.dkr.ecr.eu-west-1.amazonaws.com/can-docker-shell-service
  tag: 1.0.0.444
  pullPolicy: Always
env:
  variables:
    - name: JAVA_OPTS
      value: -Xmx512m -Xms64m -XX:MaxMetaspaceSize=120m
volumeMounts:
  - mountPath: /work
    name: shell-volume
  - mountPath: /etc/can/application.yml
    name: '{{ .Values.nameOverride }}'
    subPath: application.yml
  - mountPath: /etc/can/application.properties
    name: '{{ .Values.nameOverride }}'
    subPath: application.properties
  - mountPath: /etc/can/logback.xml
    name: '{{ .Values.nameOverride }}'
    subPath: logback.xml
resources:
  limits:
    cpu: 500m
    memory: 512Mi
    ephemeral-storage: 1Gi
  requests:
    cpu: 10m
    memory: 256Mi
    ephemeral-storage: 500Mi
applicationProperties:
  #######################################
  ### Application specific properties ###
  #######################################
  service.name: ShellService/1.0.0-SNAPSHOT
  version: 1.0.0-SNAPSHOT
  ### AWS ###
  can.service:
    aws:
      accountId: "543777179833"
      region: eu-west-1
      stepFunctions:
        actions.workers:
          maxWorkerPoolSize: 1
    shell.aws:
      stepFunctions:
        actions:
          importProjectActivity: staging_import_project
  # TODO: remove when CAN-13200 is released and deployed on production (BEGIN)
  ### Async AWS Step Functions ###
  can.service.shell.states.importProjectArn: arn:aws:states:eu-west-1:543777179833:activity:staging_import_project
  can.service.states.worker.maxWorkerPoolSize: 1
  # NOTE: following properties are relevant only when running in profile aws-step-functions-credentials (does not apply for staging/production deployment)
  #can.service.states.worker.accessKey: AWS_KEY
  #can.service.states.worker.secretKey: AWS_SECRET_KEY
  # TODO: remove when CAN-13200 is released and deployed on production (END)

  can.service.shell.dumpDirectory: /work
  can.service.shell.serverUrl: https://staging.clevermaps.io
  ### other microservices ###
  can.service.project.serverUrl: https://staging.clevermaps.io
  ##############################
  ### Spring core properties ###
  ##############################
  spring.profiles.active: dev
  #spring.profiles.active: dev, aws-credentials, aws-step-functions-actions, aws-step-functions-machines
  #spring.profiles.active: aws-iam-role-grant, aws-step-functions-actions, aws-step-functions-machines
  ### logging level configuration ###
  logging.level.root: INFO
  spring.lifecycle.timeout-per-shutdown-phase: 60s
  ###########################
  ### Actuator properties ###
  ###########################
  management.server.port: 9231
  management.server.add-application-context-header: false
  management.endpoint.metrics.enabled: true
  management.endpoint.prometheus.enabled: true
  management.endpoints.web.exposure.include: health,info,metrics,prometheus
  management.metrics.export.prometheus.enabled: true
  management.endpoint.health.show-details: always
  management.endpoint.health.probes.enabled: true
  management.endpoint.health.group.liveness.include: diskSpace,livenessState,logbackAppenderHealthCheck,ping,readinessState,importProjectWorkerHealthCheck
  ################################
  ### Spring server properties ###
  ################################
  server.shutdown: graceful
  # do not start standard HTTP tomcat port
  server.port: -1
  ##################################
  ### Spring security properties ###
  ##################################
  spring.security.oauth2.resourceserver.jwt.issuer-uri: https://login.staging.clevermaps.io/oauth2/ausczk34l1H71WKiU0h7
logbackXml: |
  {{- tpl (.Files.Get "logback.xml") . }}
