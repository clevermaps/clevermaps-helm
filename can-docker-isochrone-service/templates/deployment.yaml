apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "service.fullname" . }}
  annotations:
      reloader.stakater.com/auto: "{{ .Values.deployment.reloader }}"
  labels:
    app.kubernetes.io/name: {{ include "service.name" . }}
    helm.sh/chart: {{ include "service.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "service.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      type: module
      access: external
      module: {{ include "service.name" . }}
  template:
    metadata:
      annotations:
        prometheus.io/port: "{{ .Values.service.health_port }}"
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
      labels:
        app.kubernetes.io/name: {{ include "service.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        type: module
        access: external
        module: {{ include "service.name" . }}
    spec:
      serviceAccountName: {{ .Release.Name }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          lifecycle:
            preStop:
              exec:
                command: [
                  "sh", "-c",
                  # Introduce a delay to the shutdown sequence to wait for the
                  # pod eviction event to propagate. Then, gracefully shutdown.
                  "sleep 5",
                ]
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
            - name: health
              containerPort: {{ .Values.service.health_port }}
              protocol: TCP
          env:
            {{- $dot := . }}
            {{- range .Values.env.secrets }}
            - name: {{ tpl (index . "name") $dot }}
              valueFrom:
                secretKeyRef:
                  name: {{ tpl (index . "refname") $dot  }}
                  key: {{ tpl (index . "refkey") $dot }}
            {{- end }}
            {{- $dot := . }}
            {{- range .Values.env.variables }}
            - name: {{ tpl (index . "name") $dot }}
              value: "{{ tpl (index . "value") $dot }}"
            {{- end }}
            {{- $dot := . }}
          volumeMounts:
          {{- range .Values.volumeMounts }}
          - mountPath: {{ tpl (index . "mountPath") $dot }}
            name: {{ tpl (index . "name") $dot  }}
            subPath: {{ tpl (index . "subPath") $dot }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: health
            initialDelaySeconds: 120
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: health
            initialDelaySeconds: 90
            periodSeconds: 30
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      priorityClassName: {{ .Values.priorityClassName }}
      # Give the pod two hours to handle SIGTERM signal, otherwise SIGKILL is sent
      terminationGracePeriodSeconds: {{ .Values.timeToFinishWork }}
      volumes:
      - name: {{ include "service.name" . }}
        configMap:
          name: {{ include "service.name" . }}
      restartPolicy: Always
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
