nameOverride: can-docker-job-service
fullnameOverride: ""
namespace:
  name: can-docker-job-service
environment: staging
replicaCount: 1
timeToFinishWork: 3600
iam:
  role: arn:aws:iam::543777179833:role/eks-staging-can-{{ .Values.nameOverride }}-staging
service:
  type: ClusterIP
  port: 9160
  health_port: 9161
image:
  repository: 543777179833.dkr.ecr.eu-west-1.amazonaws.com/can-docker-job-service
  tag: 1.0.0.532
  pullPolicy: Always
deployment:
  reloader: "true"
env:
  variables:
    - name: JAVA_OPTS
      value: -Xmx80m -Xms32m -XX:MaxMetaspaceSize=120m
volumeMounts:
  - mountPath: /etc/can/application.yml
    name: '{{ .Values.nameOverride }}'
    subPath: application.yml
  - mountPath: /etc/can/application.properties
    name: '{{ .Values.nameOverride }}'
    subPath: application.properties
  - mountPath: /etc/can/logback.xml
    name: '{{ .Values.nameOverride }}'
    subPath: logback.xml
resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 10m
    memory: 256Mi
nodeSelector: {}
tolerations: []
affinity: {}
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"
  paths:
    - /rest/jobs(.*)
  hosts:
    - staging.cleveranalytics.com
  tls: []
applicationProperties:
  #######################################
  ### Application specific properties ###
  #######################################
  service.name: can-job-service
  ### AWS ###
  can.service:
    aws:
      accountId: "543777179833"
      region: eu-west-1
      stepFunctions:
        actions.workers:
          maxWorkerPoolSize: 2
      dynamodb:
        # timeout in milliseconds for a single http request to complete
        apiCallAttemptTimeout: 5000
        # timeout in milliseconds for DynamoDbClient to complete the execution of an API call - a single API call that reads
        # at most 1MB of data from DynamoDb (before applying filter condition) - may be multiple http requests (e.g. retries
        # when apiCallAttemptTimeout for a single http request is exceeded)
        apiCallTimeout: 10000
        # limit in milliseconds for audit log service to complete querying data from DynamoDb - all API calls including
        # subsequent API calls using lastEvaluatedKey from previous responses when 1MB data limit was hit
        queryTimeLimit: 30000
        # when caching table descriptions is turned on information about table key schema and indices needed for extracting
        # last evaluated key is fetched only once per table name
        cacheTableDescriptions: true
    job.aws:
      stepFunctions:
        machines:
          dataPullMachine: datasets_pull_2
          dataDumpMachine: datasets_dump
          exportMachine: export_v2
          validateMachine: validate_v2
          truncateMachine: truncate
          importProjectMachine: import_project
      dynamodb:
        environment: staging
        jobsHistoryTable: prod_jobs_history
  # TODO: remove when CAN-13200 is released and deployed on production (BEGIN)
  ### Async AWS Step Functions ###
  can.service.job.type.dataPull.machineName: datasets_pull_2
  can.service.job.type.dataDump.machineName: datasets_dump
  can.service.job.type.export.machineName: export_v2
  can.service.job.type.validate.machineName: validate_v2
  can.service.job.type.truncate.machineName: truncate
  can.service.job.type.importProject.machineName: import_project
  can.service.aws.region: eu-west-1
  can.service.aws.accountId: "543777179833"
  # NOTE: following properties are relevant only when running in profile aws-step-functions-credentials (does not apply for staging/production deployment)
  #can.service.job.aws.accessKey: ACCESS_KEY
  #can.service.job.aws.secretKey: SECRET_KEY
  #can.service.states.worker.accessKey: AWS_KEY
  #can.service.states.worker.secretKey: AWS_SECRET_KEY

  ### DynamoDB common lib configuration (active only with profile: aws-dynamodb) ###
  can.service.dynamodb.region: eu-west-1
  # timeout in milliseconds for a single http request to complete
  can.service.dynamodb.apiCallAttemptTimeout: 5000
  # timeout in milliseconds for DynamoDbClient to complete the execution of an API call - a single API call that reads
  # at most 1MB of data from DynamoDb (before applying filter condition) - may be multiple http requests (e.g. retries
  # when apiCallAttemptTimeout for a single http request is exceeded)
  can.service.dynamodb.apiCallTimeout: 10000
  # limit in milliseconds for audit log service to complete querying data from DynamoDb - all API calls including
  # subsequent API calls using lastEvaluatedKey from previous responses when 1MB data limit was hit
  can.service.dynamodb.queryTimeLimit: 30000
  # when caching table descriptions is turned on information about table key schema and indices needed for extracting
  # last evaluated key is fetched only once per table name
  can.service.dynamodb.cacheTableDescriptions: true
  # NOTE: following properties are relevant only when running in profile aws-dynamodb-credentials
  # (does not apply for staging/production deployment)
  #can.service.dynamodb.accessKey:
  #can.service.dynamodb.secretKey:
  # session token is used with temporary credentials
  #can.service.dynamodb.sessionToken:

  ### DynamoDB job-service specific configuration
  can.service.job.dynamodb.table: prod_jobs_history
  can.service.job.dynamodb.environment: staging
  # TODO: remove when CAN-13200 is released and deployed on production (END)
  ### other microservices ###
  can.service.project.serverUrl: http://localhost:9060
  ##############################
  ### Spring core properties ###
  ##############################
  spring.profiles.active: dev
  #spring.profiles.active: dev, aws-credentials, aws-step-functions-machines, aws-dynamodb
  #spring.profiles.active: aws-iam-role-grant, aws-step-functions-machines, aws-dynamodb

  ### from application-common.yml ###
  spring.lifecycle.timeout-per-shutdown-phase: 60s
  ###########################
  ### Actuator properties ###
  ###########################
  management.server.port: 9161
  management.endpoint.health.group.readiness.include: dynamoDb
  ### from application-common.yml ###
  management.server.add-application-context-header: false
  management.endpoint.metrics.enabled: true
  management.endpoint.prometheus.enabled: true
  management.endpoints.web.exposure.include: health,info,metrics,prometheus
  management.metrics.export.prometheus.enabled: true
  management.endpoint.health.show-details: always
  management.endpoint.health.probes.enabled: true
  management.endpoint.health.group.liveness.include: diskSpace,livenessState,logbackAppenderHealthCheck,ping,readinessState
  ################################
  ### Spring server properties ###
  ################################
  server.port: 9160
  ### from application-common.yml ###
  server.shutdown: graceful
  server.servlet.encoding.charset: UTF-8
  server.servlet.encoding.enabled: true
  server.servlet.encoding.force: true
  server.compression.enabled: true
  server.compression.mime-types: application/json,application/xml,text/html,text/xml,text/plain,text/csv
  server.error.include-message: always
  spring.hateoas.use-hal-as-default-json-media-type: false
  # Force English on Spring Bean Validation error messages.
  spring.web.locale: en_EN
  spring.web.locale-resolver: fixed
  # By default, requests that don't match any controller are redirected to DefaultErrorController (/error) where
  # response is built with correct value of 404 as "status" but with "/error" as a "path" and
  # "No message available" as a "message". This configures DispatcherServlet to throw NoHandlerFoundException
  # when no controller matches the request which. The exception is subsequently handled by common global
  # exception handling mechanism.
  spring.mvc.throw-exception-if-no-handler-found: true
  # disable adding default resource handler mapping - it would break error responses when making request to nonexistent
  # endpoint
  spring.web.resources.add-mappings: false
  # configure Spring to automaticaly resolve x-fowarded headers
  server.forward-headers-strategy: framework
  ##################################
  ### Spring security properties ###
  ##################################
  spring.security.oauth2.resourceserver.jwt.issuer-uri: https://login.staging.clevermaps.io/oauth2/ausczk34l1H71WKiU0h7
logbackXml: |
  {{- tpl (.Files.Get "logback.xml") . }}
